/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/@artcrimes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get listing of national art theft
     * @description https://api.fbi.gov/artcrimes https://api.fbi.gov/artcrimes/list
     */
    get: operations["_artcrimes__artcrimes_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/@artcrimes/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve information on an art crime
     * @description https://api.fbi.gov/artcrime/v1/object/{id} is backward compatible alias
     */
    get: operations["_artcrimes__id___artcrimes__id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/@wanted": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get listing of wanted people
     * @description https://api.fbi.gov/wanted https://api.fbi.gov/wanted/v1 https://api.fbi.gov/wanted/v1/list and https://api.fbi.gov/wanted/list are all backward compatible aliases of this endpoint
     */
    get: operations["_wanted__wanted_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/@wanted-person/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve information on wanted person
     * @description https://api.fbi.gov/wanted/v1/object/{id} is backward compatible alias
     */
    get: operations["__wanted_person__id___wanted_person__id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** ArtCrime */
    ArtCrime: {
      /** Pathid */
      pathId?: string | null;
      /** Uid */
      uid?: string | null;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /**
       * Images
       * @default []
       */
      images: components["schemas"]["ArtCrimeImage"][] | null;
      /** Crimecategory */
      crimeCategory?: string | null;
      /** Maker */
      maker?: string | null;
      /** Materials */
      materials?: string | null;
      /** Measurements */
      measurements?: string | null;
      /** Period */
      period?: string | null;
      /** Additionaldata */
      additionalData?: string | null;
      /** Modified */
      modified?: string | null;
      /** Publication */
      publication?: string | null;
      /** Path */
      path?: string | null;
      /** Referencenumber */
      referenceNumber?: string | null;
    };
    /** ArtCrimeImage */
    ArtCrimeImage: {
      /** Original */
      original?: string | null;
      /** Thumb */
      thumb?: string | null;
    };
    /** ArtCrimeResultSet */
    ArtCrimeResultSet: {
      /**
       * Total
       * @default 0
       */
      total: number;
      /**
       * Page
       * @default 1
       */
      page: number;
      /**
       * Items
       * @default []
       */
      items: components["schemas"]["ArtCrime"][] | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** WantedFile */
    WantedFile: {
      /** Url */
      url?: string | null;
      /** Name */
      name?: string | null;
    };
    /** WantedImage */
    WantedImage: {
      /** Caption */
      caption?: string | null;
      /** Original */
      original?: string | null;
      /** Large */
      large?: string | null;
      /** Thumb */
      thumb?: string | null;
    };
    /** WantedPerson */
    WantedPerson: {
      /** Pathid */
      pathId?: string | null;
      /** Uid */
      uid?: string | null;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /**
       * Images
       * @default []
       */
      images: components["schemas"]["WantedImage"][] | null;
      /**
       * Files
       * @default []
       */
      files: components["schemas"]["WantedFile"][] | null;
      /** Warning Message */
      warning_message?: string | null;
      /** Remarks */
      remarks?: string | null;
      /** Details */
      details?: string | null;
      /** Additional Information */
      additional_information?: string | null;
      /** Caution */
      caution?: string | null;
      /** Reward Text */
      reward_text?: string | null;
      /**
       * Reward Min
       * @default 0
       */
      reward_min: number | null;
      /**
       * Reward Max
       * @default 0
       */
      reward_max: number | null;
      /**
       * Dates Of Birth Used
       * @default []
       */
      dates_of_birth_used: string[] | null;
      /** Place Of Birth */
      place_of_birth?: string | null;
      /**
       * Locations
       * @default []
       */
      locations: string[] | null;
      /**
       * Field Offices
       * @default []
       */
      field_offices: string[] | null;
      /**
       * Legat Names
       * @default []
       */
      legat_names: string[] | null;
      /** Status */
      status?: string | null;
      /** Person Classification */
      person_classification?: string | null;
      /** Poster Classification */
      poster_classification?: string | null;
      /** Ncic */
      ncic?: string | null;
      /**
       * Age Min
       * @default 0
       */
      age_min: number | null;
      /**
       * Age Max
       * @default 0
       */
      age_max: number | null;
      /**
       * Weight Min
       * @default 0
       */
      weight_min: number | null;
      /**
       * Weight Max
       * @default 0
       */
      weight_max: number | null;
      /**
       * Height Min
       * @default 0
       */
      height_min: number | null;
      /**
       * Height Max
       * @default 0
       */
      height_max: number | null;
      /** Eyes */
      eyes?: string | null;
      /** Hair */
      hair?: string | null;
      /** Build */
      build?: string | null;
      /** Sex */
      sex?: string | null;
      /** Race */
      race?: string | null;
      /** Nationality */
      nationality?: string | null;
      /** Scars And Marks */
      scars_and_marks?: string | null;
      /** Complexion */
      complexion?: string | null;
      /** Occupations */
      occupations?: string[] | null;
      /**
       * Possible Countries
       * @default []
       */
      possible_countries: string[] | null;
      /**
       * Possible States
       * @default []
       */
      possible_states: string[] | null;
      /** Modified */
      modified?: string | null;
      /** Publication */
      publication?: string | null;
      /** Path */
      path?: string | null;
    };
    /** WantedResultSet */
    WantedResultSet: {
      /**
       * Total
       * @default 0
       */
      total: number;
      /**
       * Page
       * @default 1
       */
      page: number;
      /**
       * Items
       * @default []
       */
      items: components["schemas"]["WantedPerson"][] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  _artcrimes__artcrimes_get: {
    parameters: {
      query?: {
        title?: string | null;
        crimeCategory?: string | null;
        maker?: string | null;
        materials?: string | null;
        measurements?: string | null;
        period?: string | null;
        additionalData?: string | null;
        idInAgency?: string | null;
        referenceNumber?: string | null;
        pageSize?: number;
        page?: number;
        sort_order?: "asc" | "desc";
        sort_on?: "publication" | "modified" | "_score";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List Art Crimes */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ArtCrimeResultSet"];
        };
      };
      /** @description Resource not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  _artcrimes__id___artcrimes__id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get data for art crime */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  _wanted__wanted_get: {
    parameters: {
      query?: {
        title?: string | null;
        field_offices?: string | null;
        person_classification?: string | null;
        poster_classification?: string | null;
        status?: string | null;
        height_min?: string | null;
        height_max?: string | null;
        weight_min?: string | null;
        weight_max?: string | null;
        sex?: string | null;
        race?: string | null;
        build?: string | null;
        eyes?: string | null;
        hair?: string | null;
        age_min?: string | null;
        age_max?: string | null;
        possible_countries?: string | null;
        possible_states?: string | null;
        reward_min?: string | null;
        reward_max?: string | null;
        pageSize?: number;
        page?: number;
        sort_order?: "asc" | "desc";
        sort_on?: "publication" | "modified" | "_score";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List recent wanted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WantedResultSet"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  __wanted_person__id___wanted_person__id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get data for wanted person */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WantedPerson"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
