/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as _publicRouteRouteImport } from './routes/__public/route'
import { Route as _publicIndexRouteImport } from './routes/__public/index'
import { Route as _publicDetailsIdRouteImport } from './routes/__public/details.$id'

const _publicRouteRoute = _publicRouteRouteImport.update({
  id: '/__public',
  getParentRoute: () => rootRouteImport,
} as any)
const _publicIndexRoute = _publicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => _publicRouteRoute,
} as any)
const _publicDetailsIdRoute = _publicDetailsIdRouteImport.update({
  id: '/details/$id',
  path: '/details/$id',
  getParentRoute: () => _publicRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof _publicIndexRoute
  '/details/$id': typeof _publicDetailsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof _publicIndexRoute
  '/details/$id': typeof _publicDetailsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/__public': typeof _publicRouteRouteWithChildren
  '/__public/': typeof _publicIndexRoute
  '/__public/details/$id': typeof _publicDetailsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/details/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/details/$id'
  id: '__root__' | '/__public' | '/__public/' | '/__public/details/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  _publicRouteRoute: typeof _publicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__public': {
      id: '/__public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _publicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__public/': {
      id: '/__public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof _publicIndexRouteImport
      parentRoute: typeof _publicRouteRoute
    }
    '/__public/details/$id': {
      id: '/__public/details/$id'
      path: '/details/$id'
      fullPath: '/details/$id'
      preLoaderRoute: typeof _publicDetailsIdRouteImport
      parentRoute: typeof _publicRouteRoute
    }
  }
}

interface _publicRouteRouteChildren {
  _publicIndexRoute: typeof _publicIndexRoute
  _publicDetailsIdRoute: typeof _publicDetailsIdRoute
}

const _publicRouteRouteChildren: _publicRouteRouteChildren = {
  _publicIndexRoute: _publicIndexRoute,
  _publicDetailsIdRoute: _publicDetailsIdRoute,
}

const _publicRouteRouteWithChildren = _publicRouteRoute._addFileChildren(
  _publicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  _publicRouteRoute: _publicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
