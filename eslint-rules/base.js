export const baseRules = {
  // Core ESLint Rules
  "no-template-curly-in-string": "warn",
  "no-unmodified-loop-condition": "error",
  "no-useless-assignment": "warn",
  "require-atomic-updates": "error",

  "accessor-pairs": "error",
  "arrow-body-style": ["error", "as-needed"],
  camelcase: ["error", { properties: "never", ignoreDestructuring: true }],
  "class-methods-use-this": "warn",
  complexity: ["error", { max: 150, variant: "modified" }],
  "consistent-return": "off",
  "consistent-this": ["error", "self"],
  curly: "error",
  "default-case": "error",
  "default-case-last": "error",
  "default-param-last": "error",
  "dot-notation": [
    "error",
    { allowKeywords: false, allowPattern: "^[a-z]+(_[a-z]+)+$" },
  ],
  eqeqeq: ["error", "always"],
  "func-names": ["error", "as-needed"],
  "func-style": [
    "error",
    "declaration",
    {
      allowArrowFunctions: false,
    },
  ],
  "grouped-accessor-pairs": ["error", "getBeforeSet"],
  "guard-for-in": "error",
  "id-denylist": ["error", "cb", "callback"],
  "id-length": [
    "error",
    {
      min: 2,
      max: 32,
      properties: "never",
      exceptions: [
        "e",
        "i",
        "j",
        "k",
        "x",
        "y",
        "z",
        "_",
        "__",
        "__dirname",
        "__filename",
      ],
    },
  ],
  "logical-assignment-operators": ["error", "never"],
  "max-depth": "error",
  "max-lines": [
    "warn",
    {
      max: 1000,
      skipBlankLines: true,
      skipComments: true,
    },
  ],
  "max-lines-per-function": [
    "warn",
    {
      max: 150,
      skipBlankLines: true,
      skipComments: true,
      IIFEs: true,
    },
  ],
  "max-nested-callbacks": ["error", 3],
  "max-params": ["error", 4],
  "no-alert": "warn",
  "no-array-constructor": "error",
  "no-bitwise": "error",
  "no-caller": "error",
  "no-console": ["warn", { allow: ["warn", "error"] }],
  "no-continue": "error",
  "no-delete-var": "error",
  "no-div-regex": "error",
  "no-else-return": "error",
  "no-empty": ["warn", { allowEmptyCatch: true }],
  "no-empty-function": "warn",
  "no-eval": "error",
  "no-extend-native": "error",
  "no-extra-bind": "error",
  "no-implicit-coercion": [
    "error",
    {
      allow: ["!!"],
      disallowTemplateShorthand: false,
    },
  ],
  "no-implicit-globals": "error",
  "no-implied-eval": "error",
  "no-invalid-this": "error",
  "no-iterator": "error",
  "no-labels": "error",
  "no-lone-blocks": "error",
  "no-lonely-if": "error",
  "no-loop-func": "error",
  "no-multi-assign": "error",
  "no-multi-str": "error",
  "no-nested-ternary": "error",
  "no-new": "warn",
  "no-new-func": "error",
  "no-new-wrappers": "error",
  "no-object-constructor": "error",
  "no-octal-escape": "error",
  "no-param-reassign": "error",
  "no-plusplus": ["error", { allowForLoopAfterthoughts: true }],
  "no-proto": "error",
  "no-return-assign": "error",
  "no-script-url": "error",
  "no-sequences": "error",
  "no-shadow": "error",
  "no-throw-literal": "error",
  "no-undef-init": "error",
  "no-underscore-dangle": ["error", { allowAfterThis: true }],
  "no-unneeded-ternary": "error",
  "no-restricted-syntax": [
    "error",
    {
      selector:
        "ObjectPattern[parent.type='FunctionExpression'][parent.params.length > 0]",
      message: "Object destructuring in function parameters is discouraged.",
    },
    {
      selector:
        "ArrayPattern[parent.type='FunctionExpression'][parent.params.length > 0]",
      message: "Array destructuring in function parameters is discouraged.",
    },
    {
      selector:
        "ObjectPattern[parent.type='ArrowFunctionExpression'][parent.params.length > 0]",
      message:
        "Object destructuring in arrow function parameters is discouraged.",
    },
    {
      selector:
        "ObjectPattern[parent.type='FunctionDeclaration'][parent.params.length > 0]",
      message: "Object destructuring in function parameters is discouraged.",
    },
    {
      selector:
        "ArrayPattern[parent.type='FunctionDeclaration'][parent.params.length > 0]",
      message: "Array destructuring in function parameters is discouraged.",
    },
    {
      selector:
        "ObjectPattern[parent.type='ArrowFunctionDeclaration'][parent.params.length > 0]",
      message: "Object destructuring in function parameters is discouraged.",
    },
  ],
  "no-useless-call": "error",
  "no-useless-computed-key": "error",
  "no-useless-concat": "error",
  "no-useless-constructor": "error",
  "no-useless-rename": "error",
  "no-useless-return": "error",
  "no-var": "error",
  "object-shorthand": ["error", "properties"],
  "one-var": ["error", "never"],
  "operator-assignment": ["error", "always"],
  "prefer-arrow-callback": "error",
  "prefer-const": "error",
  "prefer-destructuring": [
    "error",
    {
      VariableDeclarator: {
        array: true,
        object: true,
      },
      AssignmentExpression: {
        array: false,
        object: false,
      },
    },
  ],
  "prefer-exponentiation-operator": "error",
  "prefer-numeric-literals": "error",
  "prefer-object-has-own": "error",
  "prefer-object-spread": "error",
  "prefer-promise-reject-errors": "error",
  "prefer-regex-literals": "error",
  "prefer-rest-params": "error",
  "prefer-spread": "error",
  "prefer-template": "warn",
  radix: "error",
  "require-await": "error",
  yoda: "error",

  // ESLint Plugin Stylistic Rules
  "@stylistic/curly-newline": ["error", "always"],
  "@stylistic/lines-around-comment": [
    "error",
    {
      beforeBlockComment: true,
      afterLineComment: false,
      beforeLineComment: true,
      allowBlockEnd: false,
      allowBlockStart: true,
      allowClassEnd: false,
      allowClassStart: true,
      allowArrayEnd: false,
      allowArrayStart: true,
      allowObjectEnd: false,
      allowObjectStart: true,
      applyDefaultIgnorePatterns: true,
      afterHashbangComment: true,
      allowEnumEnd: false,
      allowEnumStart: true,
      allowInterfaceEnd: false,
      allowInterfaceStart: true,
      allowModuleEnd: false,
      allowModuleStart: true,
      allowTypeEnd: false,
      allowTypeStart: true,
    },
  ],
  "@stylistic/member-delimiter-style": [
    "error",
    {
      multiline: {
        delimiter: "semi",
        requireLast: true,
      },
      singleline: {
        delimiter: "semi",
        requireLast: false,
      },
      multilineDetection: "brackets",
    },
  ],
  "@stylistic/no-confusing-arrow": "error",
  "@stylistic/no-tabs": "error",
  "@stylistic/padding-line-between-statements": [
    "error",
    {
      blankLine: "never",
      prev: ["singleline-const", "singleline-let", "singleline-var"],
      next: "*",
    },
    {
      blankLine: "always",
      prev: "singleline-const",
      next: ["singleline-let", "singleline-var"],
    },
    {
      blankLine: "always",
      prev: "singleline-let",
      next: ["singleline-const", "singleline-var"],
    },
    {
      blankLine: "always",
      prev: "singleline-var",
      next: ["singleline-const", "singleline-let"],
    },
    {
      blankLine: "always",
      prev: [
        "block-like",
        "directive",
        "enum",
        "export",
        "iife",
        "interface",
        "multiline-const",
        "multiline-expression",
        "multiline-let",
        "multiline-var",
        "return",
        "throw",
        "type",
      ],
      next: "*",
    },
    {
      blankLine: "always",
      prev: "*",
      next: [
        "block-like",
        "directive",
        "enum",
        "export",
        "iife",
        "interface",
        "multiline-const",
        "multiline-expression",
        "multiline-let",
        "multiline-var",
        "return",
        "throw",
        "type",
      ],
    },
    {
      blankLine: "never",
      prev: "function-overload",
      next: "function",
    },
    {
      blankLine: "always",
      prev: "import",
      next: [
        "block-like",
        "directive",
        "enum",
        "export",
        "iife",
        "interface",
        "multiline-const",
        "multiline-expression",
        "multiline-let",
        "multiline-var",
        "return",
        "throw",
        "type",
      ],
    },
  ],
  "@stylistic/type-annotation-spacing": "error",

  // ESLint Plugin Simple Import Sort Rules
  "simple-import-sort/imports": [
    "error",
    {
      groups: [
        ["^node:", "^"],
        ["^@repo/?(.*)$"],
        ["^\\.", "^[~]"],
        [
          "^node:.*\\u0000$",
          "^@?\\w.*\\u0000$",
          "^[^.].*\\u0000$",
          "^\\..*\\u0000$",
        ],
        ["^\\u0000"],
      ],
    },
  ],
  "simple-import-sort/exports": "off",
};
